<!-- BEGIN_INCLUDE(ldap:config-1) -->
	<!-- Case 1: Simple Bind (User/Password) -->
	<ldap:config name="ldapConf" url="ldap://localhost:389/" authDn="uid=admin,ou=people,dc=mulesoft,dc=org" authPassword="secret"/>
<!-- END_INCLUDE(ldap:config-1) -->

<!-- BEGIN_INCLUDE(ldap:config-2) -->
	<!-- Case 2: Anonymous Bind -->
	<ldap:config name="ldapConf" url="ldap://localhost:389/" authentication="none" authDn="ANONYMOUS"/>
<!-- END_INCLUDE(ldap:config-2) -->

<!-- BEGIN_INCLUDE(ldap:config-3) -->
	<!-- Case 3: Active Directory providing username@domain instead of DN -->
	<ldap:config name="ldapConf" url="ldap://dc1.company.com:389/" authDn="user@company.com" authPassword="secret"/>
<!-- END_INCLUDE(ldap:config-3) -->

<!-- BEGIN_INCLUDE(ldap:bind-1) -->
	<!-- Case 1: Using Config Credentials -->
	<ldap:bind config-ref="ldapConf"/>
<!-- END_INCLUDE(ldap:bind-1) -->

<!-- BEGIN_INCLUDE(ldap:bind-2) -->
	<!-- Case 2: Using New Credentials -->
	<ldap:bind config-ref="ldapConf" authDn="uid=anotherUser,ou=people,dc=mulesoft,dc=org" authPassword="secret"/>
<!-- END_INCLUDE(ldap:bind-2) -->

<!-- BEGIN_INCLUDE(ldap:bind-3) -->
	<!-- Case 3: Anonymous Bind -->
	<ldap:bind config-ref="ldapConf" authDn="ANONYMOUS" authentication="none"/>
<!-- END_INCLUDE(ldap:bind-3) -->

<!-- BEGIN_INCLUDE(ldap:bind-4) -->
	<!-- Case 4: Using New Credentials provided in Mule Expressions -->
	<ldap:bind config-ref="ldapConf" authDn="#[payload.getDN()]" authPassword="#[payload.getPassword()]"/>
<!-- END_INCLUDE(ldap:bind-4) -->


<!-- BEGIN_INCLUDE(ldap:lookup-1) -->
	<!-- Case 1: Returning all attributes of the entry -->
    <ldap:lookup dn="uid=aUser,ou=people,dc=mulesoft,dc=org"/>
<!-- END_INCLUDE(ldap:lookup-1) -->

<!-- BEGIN_INCLUDE(ldap:lookup-2) -->
	<!-- Case 2: Returning only the attributes defined in the list provided with an expression -->
    <ldap:lookup dn="#[header:dn]">
        <ldap:attributes ref="#[header:attributes]" />
    </ldap:lookup>
<!-- END_INCLUDE(ldap:lookup-2) -->

<!-- BEGIN_INCLUDE(ldap:lookup-3) -->
	<!-- Case 3: Returning only the attributes defined in the list provided in the XML config -->
    <ldap:lookup dn="#[header:dn]">
        <ldap:attributes>
        	<ldap:attribute>uid</ldap:attribute>
        	<ldap:attribute>mail</ldap:attribute>
        	<ldap:attribute>cn</ldap:attribute>
        </ldap:attributes>
    </ldap:lookup>
<!-- END_INCLUDE(ldap:lookup-3) -->

<!-- BEGIN_INCLUDE(ldap:search-1) -->
	<!-- Case 1: Simple SUB_TREE search -->
    <ldap:search baseDn="ou=people,dc=mulesoft,dc=org" filter="(&amp;(objectClass=person)(sn=Doe))" scope="SUB_TREE"/>
<!-- END_INCLUDE(ldap:search-1) -->

<!-- BEGIN_INCLUDE(ldap:search-2) -->
	<!-- Case 2: Search that will return the username and fullname of at most 100 results -->
    <ldap:search baseDn="ou=people,dc=mulesoft,dc=org" filter="(objectClass=person)" scope="SUB_TREE" maxResults="100">
        <ldap:attributes>
        	<ldap:attribute>uid</ldap:attribute>
        	<ldap:attribute>cn</ldap:attribute>
        </ldap:attributes>    
    </ldap:search>
<!-- END_INCLUDE(ldap:search-2) -->

<!-- BEGIN_INCLUDE(ldap:search-3) -->
	<!-- Case 3: Search that receives all attributes from Mule Expressions -->
    <ldap:search baseDn="#[header:baseDn]"
                 filter="#[header:filter]"
                 scope="#[header:scope]"
                 timeout="#[header:timeout]"
                 maxResults="#[header:maxResults]"
                 returnObject="#[returnObject]">
        <ldap:attributes ref="#[header:attributes]" />
    </ldap:search>
<!-- END_INCLUDE(ldap:search-3) -->

<!-- BEGIN_INCLUDE(ldap:paged-result-search-1) -->
	<!-- Case 1: Paging control to retrieve pages of 100 entries from the LDAP server returning one entry at a time -->
    <ldap:paged-result-search baseDn="ou=people,dc=mulesoft,dc=org" filter="(objectClass=person)" scope="SUB_TREE" pageSize="100" resultPageSize="1"/>
<!-- END_INCLUDE(ldap:paged-result-search-1) -->

<!-- BEGIN_INCLUDE(ldap:paged-result-search-2) -->
	<!-- Case 2: Return lists of 100 LDAP entries -->
    <ldap:paged-result-search baseDn="ou=people,dc=mulesoft,dc=org" filter="(objectClass=person)" scope="SUB_TREE" resultPageSize="100">
        <ldap:attributes>
        	<ldap:attribute>uid</ldap:attribute>
        	<ldap:attribute>cn</ldap:attribute>
        </ldap:attributes>    
    </ldap:paged-result-search>
<!-- END_INCLUDE(ldap:paged-result-search-2) -->

<!-- BEGIN_INCLUDE(ldap:search-one-1) -->
	<!-- Case 1: Simple SUB_TREE search returning the first result -->
    <ldap:search baseDn="ou=people,dc=mulesoft,dc=org" filter="(&amp;(objectClass=person)(mail=jdoe@mail.com))" scope="SUB_TREE"/>
<!-- END_INCLUDE(ldap:search-one-1) -->

<!-- BEGIN_INCLUDE(ldap:add-from-map-1) -->
	<!-- Case 1: Reference an existing map object -->
	<ldap:add-from-map dn="uid=newuser,ou=people,dc=mulesoft,dc=org" config-ref="ldapConfig">
		<ldap:entry ref="#[header:session:newUserMap]"/>
	</ldap:add-from-map>
<!-- END_INCLUDE(ldap:add-from-map-1) -->

<!-- BEGIN_INCLUDE(ldap:add-from-map-2) -->
	<!-- Case 2: Reference an existing map object -->
	<ldap:add-from-map config-ref="ldapConfig">
		<ldap:entry>
			<ldap:entry key="dn" value-ref="#[payload.getDn()]"/>
			<ldap:entry key="uid">newuser</ldap:entry>
			<ldap:entry key="sn">Doe</ldap:entry>
			<ldap:entry key="cn">John Doe</ldap:entry>
		</ldap:entry>
	</ldap:add-from-map>
<!-- END_INCLUDE(ldap:add-from-map-2) -->

<!-- BEGIN_INCLUDE(ldap:add-from-map-3) -->
	<!-- Case 3: The map is in the payload and the DN is in the map -->
	<ldap:add-from-map/>
<!-- END_INCLUDE(ldap:add-from-map-3) -->

<!-- BEGIN_INCLUDE(ldap:add-1) -->
	<!-- Case 1: LDAPEntry object is in a session variable -->
	<ldap:add config-ref="ldapConfig">
		<ldap:entry ref="#[header:session:entryToAdd]"/>
	</ldap:add>
<!-- END_INCLUDE(ldap:add-1) -->

<!-- BEGIN_INCLUDE(ldap:add-2) -->
	<!-- Case 2: LDAPEntry object is in the payload -->
	<ldap:add config-ref="ldapConfig"/>
<!-- END_INCLUDE(ldap:add-2) -->

<!-- BEGIN_INCLUDE(ldap:modify-from-map-1) -->
	<!-- Case 1: Reference an existing map object -->
	<ldap:modify-from-map dn="uid=user,ou=people,dc=mulesoft,dc=org" config-ref="ldapConfig">
		<ldap:entry ref="#[header:session:ldapUserMap]"/>
	</ldap:modify-from-map>
<!-- END_INCLUDE(ldap:modify-from-map-1) -->

<!-- BEGIN_INCLUDE(ldap:modify-from-map-2) -->
	<!-- Case 2: Reference an existing map object -->
	<ldap:modify-from-map config-ref="ldapConfig">
		<ldap:entry>
			<ldap:entry key="dn" value-ref="#[payload.getDn()]"/>
			<ldap:entry key="uid">user</ldap:entry>
			<ldap:entry key="sn">Doe</ldap:entry>
			<ldap:entry key="cn">John Doe</ldap:entry>
		</ldap:entry>
	</ldap:modify-from-map>
<!-- END_INCLUDE(ldap:modify-from-map-2) -->

<!-- BEGIN_INCLUDE(ldap:modify-from-map-3) -->
	<!-- Case 3: The map is in the payload and the DN is in the map -->
	<ldap:modify-from-map/>
<!-- END_INCLUDE(ldap:modify-from-map-3) -->

<!-- BEGIN_INCLUDE(ldap:modify-1) -->
	<!-- Case 1: LDAP entry is in the payload -->
	<ldap:modify config-ref="ldapConfig"/>
<!-- END_INCLUDE(ldap:modify-1) -->

<!-- BEGIN_INCLUDE(ldap:modify-2) -->
	<!-- Case 2: LDAP entry is in a session variable -->
	<ldap:modify config-ref="ldapConfig">
		<ldap:entry ref="#[header:session:entryToModify]"/>
	</ldap:modify>
<!-- END_INCLUDE(ldap:modify-2) -->

<!-- BEGIN_INCLUDE(ldap:delete) -->
	<ldap:delete dn="uid=userToDelete,ou=people,dc=mulesoft,dc=org"/>
<!-- END_INCLUDE(ldap:delete) -->

<!-- BEGIN_INCLUDE(ldap:rename) -->
	<ldap:rename oldDn="cn=origin, dc=domain, dc=org" newDn="cn=destination, dc=domain, dc=org" />
<!-- END_INCLUDE(ldap:rename) -->

<!-- BEGIN_INCLUDE(ldap:add-single-value-attribute) -->
	<ldap:add-single-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]" attributeValue="#[map-payload:attributeValue]"/>
<!-- END_INCLUDE(ldap:add-single-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:add-multi-value-attribute) -->
	<ldap:add-multi-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]">
		<ldap:attribute-values ref="#[map-payload:attributeValues]" />
	</ldap:add-multi-value-attribute>
<!-- END_INCLUDE(ldap:add-multi-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:modify-single-value-attribute) -->
	<ldap:modify-single-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]" attributeValue="#[map-payload:attributeValue]"/>
<!-- END_INCLUDE(ldap:modify-single-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:modify-multi-value-attribute) -->
	<ldap:modify-multi-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]">
		<ldap:attribute-values ref="#[map-payload:attributeValues]" />
	</ldap:modify-multi-value-attribute>
<!-- END_INCLUDE(ldap:modify-multi-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:delete-single-value-attribute) -->
	<ldap:delete-single-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]" attributeValue="#[map-payload:attributeValue]"/>
<!-- END_INCLUDE(ldap:delete-single-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:delete-multi-value-attribute) -->
	<ldap:delete-multi-value-attribute config-ref="ldapConf" dn="#[map-payload:dn]" attributeName="#[map-payload:attributeName]">
		<ldap:attribute-values ref="#[map-payload:attributeValues]" />
	</ldap:delete-multi-value-attribute>
<!-- END_INCLUDE(ldap:delete-multi-value-attribute) -->

<!-- BEGIN_INCLUDE(ldap:ldap-entry-to-map) -->
    <ldap:ldap-entry-to-map/>
<!-- END_INCLUDE(ldap:ldap-entry-to-map) -->

<!-- BEGIN_INCLUDE(ldap:map-to-ldap-entry) -->
    <ldap:map-to-ldap-entry/>
<!-- END_INCLUDE(ldap:map-to-ldap-entry) -->

<!-- BEGIN_INCLUDE(ldap:ldap-entry-to-ldif) -->
    <ldap:ldap-entry-to-ldif/>
<!-- END_INCLUDE(ldap:ldap-entry-to-ldif) -->

<!-- BEGIN_INCLUDE(ldap:exists-1) -->
    <ldap:exists dn="ou=people, dc=domain, dc=org"/>
<!-- END_INCLUDE(ldap:exists-1) -->

<!-- BEGIN_INCLUDE(ldap:unbind) -->
	<ldap:unbind config-ref="ldapConf"/>
<!-- END_INCLUDE(ldap:unbind) -->